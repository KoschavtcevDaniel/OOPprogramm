#include <math.h>
#include "mpi.h"
#include <iostream>
#include <fstream>

using namespace std;

int main(int argc, char* argv[])
{
	int N = 100, k, rank, world_size, ibeg, iend;
	double ProcSum = 0.0;
	double TotalSum;
	double startwtime = 0.0, endwtime;
	MPI_Status status;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &world_size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	cout << "Process " << rank << " of " << world_size << " Started" << endl;
	//ввод данных
	double x[100];
	if (rank == 0) //если процесс управления
	{
		//инициализируем массив
		for (int i = 0; i < N; i++)
		{
			x[i] = i;
		}
		startwtime = MPI_Wtime();
	}

	if (world_size > N) //если слишком много процессов для линейного разбиения
		world_size = N;

	//рассылаем х всем остальным процессам
	MPI_Bcast(x, N, MPI_DOUBLE, 0, MPI_COMM_WORLD);

	//ВЫчисление частичной суммы на каждом из процессов
	//на каждом процессе суммируются элеиенты вектора х от ibeg до iend
	k = N / world_size;
	ibeg = k * rank;
	iend = k * (rank + 1);
	if (rank == world_size - 1)
		iend = N;

	for (int i = ibeg; i < iend; i++)
		ProcSum = ProcSum + x[i];
	//сборка частичных сумм на процессе с рангом 0
	if (rank == 0) {
		TotalSum = ProcSum;
		for (int i = 1; i < world_size; i++) {
			MPI_Recv(&ProcSum, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, &status);
			endwtime = MPI_Wtime();

			cout << "SUM of process number " << i << " = " << ProcSum << endl;
			TotalSum = TotalSum + ProcSum;
		}
	}
	else //все процессы отсылают свои частичные суммы
		MPI_Send(&ProcSum, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);
	//вывод результата
	if (rank == 0) {
		printf("\nTotal Sum = %10.2f", TotalSum);
		cout << " time is " << endwtime - startwtime << endl;
	}
	MPI_Finalize();

	return 0;
}